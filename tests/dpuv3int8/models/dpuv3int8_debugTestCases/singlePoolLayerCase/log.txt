[INFO] parse raw model     :  0%|          | 0/271 [00:00<?, ?it/s]                          [INFO] parse raw model     :100%|██████████| 271/271 [00:00<00:00, 16524.05it/s]             
[INFO] infer shape (NHWC)  :  0%|          | 0/220 [00:00<?, ?it/s]                          [INFO] infer shape (NHWC)  :100%|██████████| 220/220 [00:00<00:00, 4681.50it/s]              
[INFO] generate xmodel     :  0%|          | 0/220 [00:00<?, ?it/s]                          [INFO] generate xmodel     : 52%|█████▏    | 115/220 [00:00<00:00, 1131.51it/s]              [INFO] generate xmodel     : 80%|███████▉  | 175/220 [00:00<00:00, 859.19it/s]               [INFO] generate xmodel     : 98%|█████████▊| 216/220 [00:00<00:00, 419.12it/s]               [INFO] generate xmodel     :100%|██████████| 220/220 [00:00<00:00, 514.59it/s]               ['/proj/xsjhdstaff3/paolod/perforce/RDI_paolod_Dev_work/src/DeepLearning/xilinx/gitlab/vai-toolchain/SC/HwAbstraction', '/wrk/hdstaff/paolod/perforce/RDI_paolod_Dev_work/src/DeepLearning/xilinx/gitlab/vai-toolchain', '/wrk/hdstaff/paolod/perforce/RDI_paolod_Dev_work/temp/anaconda2/envs/XIR2/lib/python37.zip', '/wrk/hdstaff/paolod/perforce/RDI_paolod_Dev_work/temp/anaconda2/envs/XIR2/lib/python3.7', '/wrk/hdstaff/paolod/perforce/RDI_paolod_Dev_work/temp/anaconda2/envs/XIR2/lib/python3.7/lib-dynload', '/wrk/hdstaff/paolod/perforce/RDI_paolod_Dev_work/temp/anaconda2/envs/XIR2/lib/python3.7/site-packages', '/proj/xsjhdstaff3/paolod/perforce/RDI_paolod_Dev_work/temp/anaconda2/envs/XIR2/lib/python3.7/site-packages/xir']
[INFO] ignore pretty_errors package
no wait
proto examples/tf_resnetv1_50_imagenet_224_224_6.97G/quantized/quantize_eval_model.pb
caffe None
[INFO] tensorflow model: examples/tf_resnetv1_50_imagenet_224_224_6.97G/quantized/quantize_eval_model.pb
<bound method Op.get_name of <op.Op object at 0x7f4937d23410>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d233d0>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d23390>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d231d0>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d23350>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d232d0>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d23210>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d23250>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d23190>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d23310>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d23150>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d23110>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d230d0>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d23090>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d23050>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ef10>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2efd0>> [1]
<bound method Op.get_name of <op.Op object at 0x7f4937d2eb50>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ef50>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ef90>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2eed0>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ee90>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ee50>> [256, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ee10>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2edd0>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ed90>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ed50>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ea90>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ed10>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ecd0>> [64, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ec90>> [256, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ec50>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e7d0>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ec10>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ebd0>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2eb90>> [4, 30, 30, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ead0>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2eb10>> [4, 14, 14, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ea50>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ea10>> [4, 14, 14, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e9d0>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e710>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e990>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e950>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e910>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e8d0>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e450>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e890>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e850>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e810>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e750>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e790>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e6d0>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e690>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e650>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e610>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e5d0>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e590>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e550>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e390>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e510>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e4d0>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e490>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e3d0>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e410>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e350>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e310>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e2d0>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e290>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e250>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e210>> [128, 3, 3, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e1d0>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e190>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e150>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e110>> [4, 14, 14, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e0d0>> [64, 7, 7, 3]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e090>> [512, 1, 1, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2e050>> [128, 3, 3, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c050>> [512, 1, 1, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c090>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c0d0>> [4, 14, 14, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c110>> [128, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c150>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c190>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c1d0>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c210>> [4, 230, 230, 3]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c250>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c290>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c2d0>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c310>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c350>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c390>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c3d0>> [128, 3, 3, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c410>> [2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c450>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c490>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c4d0>> [4, 230, 230, 3]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c510>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c550>> [64, 3, 3, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c590>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c5d0>> [128, 3, 3, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c610>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c650>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c690>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c6d0>> [512, 3, 3, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c710>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c750>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c790>> [512, 3, 3, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c7d0>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c810>> [1024, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c850>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c890>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c8d0>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c910>> [2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c950>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c990>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2c9d0>> [2048, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ca10>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ca50>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ca90>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cad0>> [128, 3, 3, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cb10>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cb50>> [4, 14, 14, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cb90>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cbd0>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cc10>> [4, 14, 14, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cc50>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cc90>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ccd0>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cd10>> [64, 3, 3, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cd50>> [128, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cd90>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cdd0>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ce10>> [4, 7, 7, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ce50>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ce90>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2ced0>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cf10>> [128, 3, 3, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cf50>> [128, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cf90>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d2cfd0>> [128, 3, 3, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29dd0>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29fd0>> [4, 7, 7, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29d10>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29f90>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d29f50>> [4, 7, 7, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29f10>> [4, 30, 30, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29ed0>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d29a50>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29e90>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d29e50>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29e10>> [64, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d29d50>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d29d90>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29cd0>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29c90>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29c50>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29990>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29c10>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29bd0>> [4, 224, 224, 3]
<bound method Op.get_name of <op.Op object at 0x7f4937d29b90>> [1024, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d29b50>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d294d0>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29b10>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29ad0>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29a90>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d299d0>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29a10>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29950>> [128, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29890>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29910>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d298d0>> [4, 28, 28, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29850>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29810>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d297d0>> [64, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29790>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29750>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29710>> [64, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d296d0>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29690>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29650>> [4, 28, 28, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29610>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d295d0>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29410>> [4, 28, 28, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29590>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29550>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29510>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29450>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29490>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d293d0>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29390>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29350>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29310>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d292d0>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29290>> [512, 1, 1, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d29250>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29210>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d291d0>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29190>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d29150>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29050>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d29110>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d290d0>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d29090>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d27c90>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27f50>> [512, 1, 1, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27f90>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27fd0>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27f10>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27ed0>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27e90>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27bd0>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27e50>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27e10>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27dd0>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d27d90>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27910>> [64, 7, 7, 3]
<bound method Op.get_name of <op.Op object at 0x7f4937d27d50>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d27d10>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27cd0>> [4, 28, 28, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27c10>> [128, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d27c50>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27b90>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27b50>> [4, 224, 224, 3]
<bound method Op.get_name of <op.Op object at 0x7f4937d27b10>> [64, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27850>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27ad0>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27a90>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27a50>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d27a10>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27490>> [4, 28, 28, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d279d0>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27990>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27950>> [128, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d27890>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d278d0>> [64, 3, 3, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27810>> [512, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d277d0>> [4, 28, 28, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27790>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27750>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27710>> [256, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d276d0>> [64, 3, 3, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27690>> [256, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d273d0>> [512, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27650>> [4, 28, 28, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27610>> [64, 3, 3, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d275d0>> [4, 112, 112, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27590>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d27110>> [512, 1, 1, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27550>> [512, 1, 1, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27510>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d274d0>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d27410>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27450>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27390>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27350>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27310>> [4, 58, 58, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d272d0>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27290>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27250>> [4, 58, 58, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27210>> [4, 112, 112, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d27050>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d271d0>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d27190>> [128, 3, 3, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27150>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d27090>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d270d0>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25c10>> [256, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25fd0>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25f90>> [4, 28, 28, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25f50>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25f10>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25ed0>> [4, 112, 112, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25e90>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d25e50>> [4, 28, 28, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d25e10>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25b50>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d25dd0>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25d90>> [4, 28, 28, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25d50>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25d10>> [256, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25890>> [512, 1, 1, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d25cd0>> [64, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25c90>> [256, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25c50>> [512, 1, 1, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d25b90>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d25bd0>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25b10>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d25ad0>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25a90>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d257d0>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d25a50>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25a10>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d259d0>> [128]
<bound method Op.get_name of <op.Op object at 0x7f4937d25990>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25310>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d25950>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25910>> [4, 16, 16, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d258d0>> [4, 16, 16, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25810>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25850>> [4, 7, 7, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25790>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d256d0>> [4, 7, 7, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25750>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25710>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25690>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25650>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d25610>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d255d0>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25590>> [256, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25550>> [512, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25510>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d254d0>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25490>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25450>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25410>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d25250>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d253d0>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d25390>> [2048, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25350>> [512, 1, 1, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25290>> [4, 7, 7, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d252d0>> [4, 7, 7, 1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d25210>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f4937d251d0>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25190>> [4, 7, 7, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25150>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d25110>> [4, 7, 7, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d250d0>> [4, 7, 7, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25090>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d25050>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d24050>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24090>> [256, 3, 3, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d240d0>> [64, 3, 3, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d24110>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24150>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d24190>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d241d0>> [2]
<bound method Op.get_name of <op.Op object at 0x7f4937d24210>> [512, 3, 3, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24250>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d24290>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d242d0>> [512, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24310>> [512, 3, 3, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24350>> [256, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d24390>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d243d0>> [4, 56, 56, 256]
<bound method Op.get_name of <op.Op object at 0x7f4937d24410>> [2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24450>> [512, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24490>> [256]
<bound method Op.get_name of <op.Op object at 0x7f4937d244d0>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24510>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24550>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24590>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d245d0>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24610>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24650>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24690>> [4, 56, 56, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d246d0>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24710>> [128, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24750>> [2048, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24790>> [4, 28, 28, 128]
<bound method Op.get_name of <op.Op object at 0x7f4937d247d0>> [2048, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24810>> [128, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24850>> [2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24890>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d248d0>> [4, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24910>> [256, 1, 1, 64]
<bound method Op.get_name of <op.Op object at 0x7f4937d24950>> [4, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24990>> [64]
<bound method Op.get_name of <op.Op object at 0x7f4937d249d0>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24a10>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24a50>> [2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24a90>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24ad0>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24b10>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24b50>> [2048, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24b90>> [512, 3, 3, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24bd0>> [2048, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24c10>> [512, 3, 3, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24c50>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24c90>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24cd0>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24d10>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24d50>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24d90>> [2048, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24dd0>> [2048, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f493332bfd0>> [2048]
<bound method Op.get_name of <op.Op object at 0x7f493332bc50>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f493332bf50>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f493332bf90>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f493332bed0>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24e10>> [512, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24e50>> [512, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24e90>> [512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24ed0>> [4, 7, 7, 512]
<bound method Op.get_name of <op.Op object at 0x7f4937d24f10>> [2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24f50>> [4, 7, 7, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24f90>> [4, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f4937d24fd0>> [1000, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f493332d050>> [1000, 1, 1, 2048]
<bound method Op.get_name of <op.Op object at 0x7f493332d090>> [1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d0d0>> [4, 1, 1, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d110>> [4, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d150>> [1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d190>> [4, 1, 1, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d1d0>> [4, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d210>> [4, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d250>> [4, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d290>> [4, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d2d0>> [4, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d310>> [4, 1000]
<bound method Op.get_name of <op.Op object at 0x7f493332d350>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f493332d390>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f493332d3d0>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f493332d410>> [1024, 1, 1, 256]
<bound method Op.get_name of <op.Op object at 0x7f493332d450>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f493332d490>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f493332d4d0>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f493332d510>> [1024]
<bound method Op.get_name of <op.Op object at 0x7f493332d550>> [4, 14, 14, 1024]
<bound method Op.get_name of <op.Op object at 0x7f493332d590>> [512]
<bound method Op.get_name of <op.Op object at 0x7f493332d5d0>> [4, 14, 14, 512]
<bound method Op.get_name of <op.Op object at 0x7f493332d610>> [4, 14, 14, 512]
<bound method Op.get_name of <op.Op object at 0x7f493332d650>> [4, 14, 14, 512]
<bound method Op.get_name of <op.Op object at 0x7f493332d690>> [4, 14, 14, 512]
<bound method Op.get_name of <op.Op object at 0x7f493332d6d0>> [256, 1, 1, 512]
<bound method Op.get_name of <op.Op object at 0x7f493332d710>> [2048]
<bound method Op.get_name of <op.Op object at 0x7f493332d750>> [4, 28, 28, 256]
<bound method Op.get_name of <op.Op object at 0x7f493332d790>> [64]
<bound method Op.get_name of <op.Op object at 0x7f493332d7d0>> [64]
<bound method Op.get_name of <op.Op object at 0x7f493332d810>> [2]
<bound method Op.get_name of <op.Op object at 0x7f493332d850>> [256]
<bound method Op.get_name of <op.Op object at 0x7f493332d890>> [256]
<bound method Op.get_name of <op.Op object at 0x7f493332d8d0>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f493332d910>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f493332d950>> [4, 14, 14, 256]
<bound method Op.get_name of <op.Op object at 0x7f493332d990>> [256, 3, 3, 256]
 ############################################# 
 ######  Hyper Graph Construction 
 ############################################# 
 ############################################# 
 ######  Hyper Graph Construction
 ############################################# 
input data [DeephiQuantizationElements(bits=8, fraction=-1)] 0 1
0
resnet_v1_50/block4/unit_1/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=2)] 2 1
2
resnet_v1_50/block4/unit_1/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=2)] 1 1
1
resnet_v1_50/block3/unit_2/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_1/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=6)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_4/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3)] 2 1
2
resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_4/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=11), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_1/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3)] 2 1
2
resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_1/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_6/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/shortcut/MaxPool maxpool2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/Pad pad [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_5/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3)] 2 1
2
resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_5/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_6/bottleneck_v1/shortcut/MaxPool maxpool2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=6)] 1 1
1
resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_6/bottleneck_v1/Pad pad [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=11), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block2/unit_4/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3)] 2 1
2
resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool maxpool2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=6)] 1 1
1
resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_6/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3)] 2 1
2
resnet_v1_50/pool5 avgpool2d [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_3/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=2)] 1 1
1
resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_3/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=2)] 2 1
2
resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_3/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3)] 2 1
2
resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_3/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block4/unit_2/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=2)] 1 1
1
resnet_v1_50/block1/unit_3/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 2 1
2
resnet_v1_50/block4/unit_2/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=2)] 2 1
2
resnet_v1_50/block1/unit_3/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_3/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4)] 2 1
2
resnet_v1_50/SpatialSqueeze squeeze [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=2)] 1 1
1
resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/logits/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=12)] 1 1
1
resnet_v1_50/block2/unit_1/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 2 1
2
resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/predictions/Reshape reshape [DeephiQuantizationElements(bits=8, fraction=2), DeephiQuantizationElements(bits=8, fraction=2)] 1 1
1
resnet_v1_50/Pad pad [DeephiQuantizationElements(bits=8, fraction=-1), DeephiQuantizationElements(bits=8, fraction=-1)] 1 1
1
resnet_v1_50/predictions/Reshape_1 reshape [DeephiQuantizationElements(bits=8, fraction=7)] 1 1
1
resnet_v1_50/block2/unit_2/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/predictions/Softmax softmax [DeephiQuantizationElements(bits=8, fraction=2)] 1 1
1
resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_2/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=3)] 2 1
2
resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=7), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=-1), DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=12), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block1/unit_3/bottleneck_v1/Pad pad [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/pool1/MaxPool maxpool2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=3)] 1 1
1
resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_2/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 2 1
2
resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block1/unit_1/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 2 1
2
resnet_v1_50/block1/unit_1/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_2/bottleneck_v1/add add [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 2 1
2
resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=3), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=6), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=8), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block1/unit_2/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block2/unit_3/bottleneck_v1/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D conv2d [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=9), DeephiQuantizationElements(bits=8, fraction=5)] 1 1
1
resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Relu relu [DeephiQuantizationElements(bits=8, fraction=4), DeephiQuantizationElements(bits=8, fraction=4)] 1 1
1
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name input data
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/shortcut/MaxPool maxpool2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'kernel', 'stride', 'global', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/shortcut/MaxPool/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/Pad pad
XIR ATT dict_keys(['quant_out_signed', 'constant_values', 'paddings', 'quant_in_signed', 'mode'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/Pad/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/pool5/scale_value_const const
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name input/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/Pad pad
XIR ATT dict_keys(['quant_out_signed', 'constant_values', 'paddings', 'quant_in_signed', 'mode'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/Pad/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/predictions/Reshape_1/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/Pad pad
XIR ATT dict_keys(['quant_out_signed', 'constant_values', 'paddings', 'quant_in_signed', 'mode'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/Pad/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/pool1/MaxPool maxpool2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'kernel', 'stride', 'global', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/pool1/MaxPool/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/predictions/Shape_const_const const
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/shortcut/MaxPool maxpool2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'kernel', 'stride', 'global', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/shortcut/MaxPool/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/Pad pad
XIR ATT dict_keys(['quant_out_signed', 'constant_values', 'paddings', 'quant_in_signed', 'mode'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/Pad/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool maxpool2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'kernel', 'stride', 'global', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/predictions/Reshape/shape_const const
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/pool5 avgpool2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'count_include_invalid', 'count_include_pad', 'kernel', 'stride', 'global', 'pad', 'pad_mode'])
XIR OP name resnet_v1_50/pool5/mul mul
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/pool5/mul/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/logits/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/logits/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/logits/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/logits/BiasAdd/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/SpatialSqueeze squeeze
XIR ATT dict_keys(['quant_out_signed', 'axis', 'quant_in_signed'])
XIR OP name resnet_v1_50/logits/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/logits/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/SpatialSqueeze/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/predictions/Reshape reshape
XIR ATT dict_keys(['quant_out_signed', 'shape', 'quant_in_signed'])
XIR OP name resnet_v1_50/predictions/Reshape/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/predictions/Softmax softmax
XIR ATT dict_keys(['quant_out_signed', 'axis', 'quant_in_signed'])
XIR OP name resnet_v1_50/predictions/Reshape_1 reshape
XIR ATT dict_keys(['quant_out_signed', 'shape', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Relu/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D_weights const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D_weights_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D_bias const
XIR ATT dict_keys(['data', 'shape', 'data_type'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/BatchNorm/FusedBatchNorm/add/aquant fix
XIR ATT dict_keys(['quant_in_bit_width', 'round_mode', 'bit_width', 'fix_point', 'quant_out_signed', 'quant_in_quantize_pos', 'quant_in_signed', 'quant_out_bit_width', 'quant_out_round_mode', 'if_signed', 'quant_in_round_mode', 'quant_out_quantize_pos'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D_bias_fixneuron fix
XIR ATT dict_keys(['if_signed', 'round_mode', 'fix_point', 'bit_width'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D conv2d
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed', 'dilation', 'kernel', 'stride', 'pad_mode', 'pad'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/add add
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
XIR OP name resnet_v1_50/block2/unit_4/bottleneck_v1/Relu relu
XIR ATT dict_keys(['quant_out_signed', 'quant_in_signed'])
Floyd & Warshall
BFS
 ############################################# 
 ######  Parameters Assimilation
 ############################################# 
 ############################################# 
 ######  Assimilating Fix Neurons
 ############################################# 
 ############################################# 
 ######  Assimilating Relu
 ############################################# 
{'mode': 'CONSTANT', 'quant_in_signed': True, 'bit_width': 8, 'paddings': [0, 0, 1, 1, 1, 1, 0, 0], 'constant_values': [0, 0, 0, 0], 'fix_point': 4, 'quant_out_signed': True, 'kernel_width': 1, 'kernel_height': 1, 'kernel_1': TensorShapes(batch=0, width=1, height=1, channel=0), 'stride_width': 1, 'stride_height': 1, 'strides_1': TensorShapes(batch=0, width=1, height=1, channel=0)}
Pad assimilation resnet_v1_50/block2/unit_4/bottleneck_v1/Pad [0, 0, 1, 1, 1, 1, 0, 0] resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D [0, 0, 1, 1, 1, 1, 0, 0]
Name resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D Parameter False	Space 3211264 bits, BitePerPixel 8 Fraction 4 Start 0 End 401408	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 28, 28, 128] CNN_Shape TensorShapes(batch=4, width=28, height=28, channel=128)
Name resnet_v1_50/block2/unit_4/bottleneck_v1/Pad Parameter False	Space 3686400 bits, BitePerPixel 8 Fraction 4 Start 0 End 460800	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 30, 30, 128] CNN_Shape TensorShapes(batch=4, width=30, height=30, channel=128)
Name resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D Parameter False	Space 802816 bits, BitePerPixel 8 Fraction 4 Start 0 End 100352	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 14, 14, 128] CNN_Shape TensorShapes(batch=4, width=14, height=14, channel=128)
{'mode': 'CONSTANT', 'quant_in_signed': True, 'bit_width': 8, 'paddings': [0, 0, 3, 3, 3, 3, 0, 0], 'constant_values': [0, 0, 0, 0], 'fix_point': -1, 'quant_out_signed': True, 'kernel_width': 1, 'kernel_height': 1, 'kernel_1': TensorShapes(batch=0, width=1, height=1, channel=0), 'stride_width': 1, 'stride_height': 1, 'strides_1': TensorShapes(batch=0, width=1, height=1, channel=0)}
Pad assimilation resnet_v1_50/Pad [0, 0, 3, 3, 3, 3, 0, 0] resnet_v1_50/conv1/Conv2D [0, 0, 3, 3, 3, 3, 0, 0]
Name input Parameter False	Space 4816896 bits, BitePerPixel 8 Fraction -1 Start 0 End 602112	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 224, 224, 3] CNN_Shape TensorShapes(batch=4, width=224, height=224, channel=3)
Name resnet_v1_50/Pad Parameter False	Space 5078400 bits, BitePerPixel 8 Fraction -1 Start 0 End 634800	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 230, 230, 3] CNN_Shape TensorShapes(batch=4, width=230, height=230, channel=3)
Name resnet_v1_50/conv1/Conv2D Parameter False	Space 25690112 bits, BitePerPixel 8 Fraction 3 Start 0 End 3211264	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 112, 112, 64] CNN_Shape TensorShapes(batch=4, width=112, height=112, channel=64)
{'mode': 'CONSTANT', 'quant_in_signed': True, 'bit_width': 8, 'paddings': [0, 0, 1, 1, 1, 1, 0, 0], 'constant_values': [0, 0, 0, 0], 'fix_point': 4, 'quant_out_signed': True, 'kernel_width': 1, 'kernel_height': 1, 'kernel_1': TensorShapes(batch=0, width=1, height=1, channel=0), 'stride_width': 1, 'stride_height': 1, 'strides_1': TensorShapes(batch=0, width=1, height=1, channel=0)}
Pad assimilation resnet_v1_50/block1/unit_3/bottleneck_v1/Pad [0, 0, 1, 1, 1, 1, 0, 0] resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D [0, 0, 1, 1, 1, 1, 0, 0]
Name resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D Parameter False	Space 6422528 bits, BitePerPixel 8 Fraction 4 Start 0 End 802816	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 56, 56, 64] CNN_Shape TensorShapes(batch=4, width=56, height=56, channel=64)
Name resnet_v1_50/block1/unit_3/bottleneck_v1/Pad Parameter False	Space 6889472 bits, BitePerPixel 8 Fraction 4 Start 0 End 861184	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 58, 58, 64] CNN_Shape TensorShapes(batch=4, width=58, height=58, channel=64)
Name resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D Parameter False	Space 1605632 bits, BitePerPixel 8 Fraction 4 Start 0 End 200704	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 28, 28, 64] CNN_Shape TensorShapes(batch=4, width=28, height=28, channel=64)
{'mode': 'CONSTANT', 'quant_in_signed': True, 'bit_width': 8, 'paddings': [0, 0, 1, 1, 1, 1, 0, 0], 'constant_values': [0, 0, 0, 0], 'fix_point': 4, 'quant_out_signed': True, 'kernel_width': 1, 'kernel_height': 1, 'kernel_1': TensorShapes(batch=0, width=1, height=1, channel=0), 'stride_width': 1, 'stride_height': 1, 'strides_1': TensorShapes(batch=0, width=1, height=1, channel=0)}
Pad assimilation resnet_v1_50/block3/unit_6/bottleneck_v1/Pad [0, 0, 1, 1, 1, 1, 0, 0] resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D [0, 0, 1, 1, 1, 1, 0, 0]
Name resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D Parameter False	Space 1605632 bits, BitePerPixel 8 Fraction 4 Start 0 End 200704	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 14, 14, 256] CNN_Shape TensorShapes(batch=4, width=14, height=14, channel=256)
Name resnet_v1_50/block3/unit_6/bottleneck_v1/Pad Parameter False	Space 2097152 bits, BitePerPixel 8 Fraction 4 Start 0 End 262144	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 16, 16, 256] CNN_Shape TensorShapes(batch=4, width=16, height=16, channel=256)
Name resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D Parameter False	Space 401408 bits, BitePerPixel 8 Fraction 4 Start 0 End 50176	Specifier  Layout -1 Time -1 Strategies None None	Shape  [4, 7, 7, 256] CNN_Shape TensorShapes(batch=4, width=7, height=7, channel=256)
  0 const      _50/predictions/Reshape/shape_const Ops 0.000000e+00 IN [] OUT ['resnet_v1_50/predictions/Reshape']
  1 const      v1_50/predictions/Shape_const_const Ops 0.000000e+00 IN [] OUT ['resnet_v1_50/predictions/Reshape_1']
  2 data       input                               Ops 0.000000e+00 IN [] OUT ['resnet_v1_50/conv1/Conv2D']
  3 conv2d     resnet_v1_50/conv1/Conv2D           Ops 0.000000e+00 IN ['input'] OUT ['resnet_v1_50/pool1/MaxPool']
  4 maxpool2d  resnet_v1_50/pool1/MaxPool          Ops 0.000000e+00 IN ['resnet_v1_50/conv1/Conv2D'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D']
  5 conv2d     nit_1/bottleneck_v1/shortcut/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/pool1/MaxPool'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/add']
  6 conv2d     1/unit_1/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/pool1/MaxPool'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D']
  7 conv2d     1/unit_1/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D']
  8 conv2d     1/unit_1/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/add']
  9 add        _50/block1/unit_1/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D', 'resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D'] OUT ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block1/unit_2/bottleneck_v1/add']
 10 conv2d     1/unit_2/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D']
 11 conv2d     1/unit_2/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D']
 12 conv2d     1/unit_2/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block1/unit_2/bottleneck_v1/add']
 13 add        _50/block1/unit_2/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block1/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool']
 14 maxpool2d  it_3/bottleneck_v1/shortcut/MaxPool Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/add'] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/add']
 15 conv2d     1/unit_3/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/add'] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D']
 16 conv2d     1/unit_3/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D']
 17 conv2d     1/unit_3/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/add']
 18 add        _50/block1/unit_3/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool', 'resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D'] OUT ['resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D']
 19 conv2d     nit_1/bottleneck_v1/shortcut/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_3/bottleneck_v1/add'] OUT ['resnet_v1_50/block2/unit_1/bottleneck_v1/add']
 20 conv2d     2/unit_1/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_3/bottleneck_v1/add'] OUT ['resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D']
 21 conv2d     2/unit_1/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D']
 22 conv2d     2/unit_1/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block2/unit_1/bottleneck_v1/add']
 23 add        _50/block2/unit_1/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D', 'resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D'] OUT ['resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block2/unit_2/bottleneck_v1/add']
 24 conv2d     2/unit_2/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D']
 25 conv2d     2/unit_2/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D']
 26 conv2d     2/unit_2/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block2/unit_2/bottleneck_v1/add']
 27 add        _50/block2/unit_2/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block2/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block2/unit_3/bottleneck_v1/add']
 28 conv2d     2/unit_3/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_2/bottleneck_v1/add'] OUT ['resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D']
 29 conv2d     2/unit_3/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D']
 30 conv2d     2/unit_3/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block2/unit_3/bottleneck_v1/add']
 31 add        _50/block2/unit_3/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block2/unit_2/bottleneck_v1/add'] OUT ['resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block2/unit_4/bottleneck_v1/shortcut/MaxPool']
 32 maxpool2d  it_4/bottleneck_v1/shortcut/MaxPool Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_3/bottleneck_v1/add'] OUT ['resnet_v1_50/block2/unit_4/bottleneck_v1/add']
 33 conv2d     2/unit_4/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_3/bottleneck_v1/add'] OUT ['resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D']
 34 conv2d     2/unit_4/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D']
 35 conv2d     2/unit_4/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block2/unit_4/bottleneck_v1/add']
 36 add        _50/block2/unit_4/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_4/bottleneck_v1/shortcut/MaxPool', 'resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D'] OUT ['resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D']
 37 conv2d     nit_1/bottleneck_v1/shortcut/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_4/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_1/bottleneck_v1/add']
 38 conv2d     3/unit_1/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block2/unit_4/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D']
 39 conv2d     3/unit_1/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D']
 40 conv2d     3/unit_1/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block3/unit_1/bottleneck_v1/add']
 41 add        _50/block3/unit_1/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D', 'resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D'] OUT ['resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block3/unit_2/bottleneck_v1/add']
 42 conv2d     3/unit_2/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D']
 43 conv2d     3/unit_2/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D']
 44 conv2d     3/unit_2/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block3/unit_2/bottleneck_v1/add']
 45 add        _50/block3/unit_2/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block3/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block3/unit_3/bottleneck_v1/add']
 46 conv2d     3/unit_3/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_2/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D']
 47 conv2d     3/unit_3/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D']
 48 conv2d     3/unit_3/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block3/unit_3/bottleneck_v1/add']
 49 add        _50/block3/unit_3/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block3/unit_2/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block3/unit_4/bottleneck_v1/add']
 50 conv2d     3/unit_4/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_3/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D']
 51 conv2d     3/unit_4/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D']
 52 conv2d     3/unit_4/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block3/unit_4/bottleneck_v1/add']
 53 add        _50/block3/unit_4/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block3/unit_3/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block3/unit_5/bottleneck_v1/add']
 54 conv2d     3/unit_5/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_4/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D']
 55 conv2d     3/unit_5/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D']
 56 conv2d     3/unit_5/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block3/unit_5/bottleneck_v1/add']
 57 add        _50/block3/unit_5/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block3/unit_4/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block3/unit_6/bottleneck_v1/shortcut/MaxPool']
 58 maxpool2d  it_6/bottleneck_v1/shortcut/MaxPool Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_5/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_6/bottleneck_v1/add']
 59 conv2d     3/unit_6/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_5/bottleneck_v1/add'] OUT ['resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D']
 60 conv2d     3/unit_6/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D']
 61 conv2d     3/unit_6/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block3/unit_6/bottleneck_v1/add']
 62 add        _50/block3/unit_6/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_6/bottleneck_v1/shortcut/MaxPool', 'resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D'] OUT ['resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D']
 63 conv2d     nit_1/bottleneck_v1/shortcut/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_6/bottleneck_v1/add'] OUT ['resnet_v1_50/block4/unit_1/bottleneck_v1/add']
 64 conv2d     4/unit_1/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block3/unit_6/bottleneck_v1/add'] OUT ['resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D']
 65 conv2d     4/unit_1/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D']
 66 conv2d     4/unit_1/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block4/unit_1/bottleneck_v1/add']
 67 add        _50/block4/unit_1/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D', 'resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D'] OUT ['resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block4/unit_2/bottleneck_v1/add']
 68 conv2d     4/unit_2/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D']
 69 conv2d     4/unit_2/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D']
 70 conv2d     4/unit_2/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block4/unit_2/bottleneck_v1/add']
 71 add        _50/block4/unit_2/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block4/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block4/unit_3/bottleneck_v1/add']
 72 conv2d     4/unit_3/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_2/bottleneck_v1/add'] OUT ['resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D']
 73 conv2d     4/unit_3/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D']
 74 conv2d     4/unit_3/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block4/unit_3/bottleneck_v1/add']
 75 add        _50/block4/unit_3/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block4/unit_2/bottleneck_v1/add'] OUT ['resnet_v1_50/pool5']
 76 avgpool2d  resnet_v1_50/pool5                  Ops 0.000000e+00 IN ['resnet_v1_50/block4/unit_3/bottleneck_v1/add'] OUT ['resnet_v1_50/pool5/mul']
 77 mul        resnet_v1_50/pool5/mul              Ops 0.000000e+00 IN ['resnet_v1_50/pool5'] OUT ['resnet_v1_50/logits/Conv2D']
 78 conv2d     resnet_v1_50/logits/Conv2D          Ops 0.000000e+00 IN ['resnet_v1_50/pool5/mul'] OUT ['resnet_v1_50/SpatialSqueeze']
 79 squeeze    resnet_v1_50/SpatialSqueeze         Ops 0.000000e+00 IN ['resnet_v1_50/logits/Conv2D'] OUT ['resnet_v1_50/predictions/Reshape']
 80 reshape    resnet_v1_50/predictions/Reshape    Ops 0.000000e+00 IN ['resnet_v1_50/SpatialSqueeze'] OUT ['resnet_v1_50/predictions/Softmax']
 81 softmax    resnet_v1_50/predictions/Softmax    Ops 0.000000e+00 IN ['resnet_v1_50/predictions/Reshape'] OUT ['resnet_v1_50/predictions/Reshape_1']
 82 reshape    resnet_v1_50/predictions/Reshape_1  Ops 0.000000e+00 IN ['resnet_v1_50/predictions/Softmax'] OUT []
Outputs dict_keys(['resnet_v1_50/predictions/Reshape_1'])
 delete arch  resnet_v1_50/block1/unit_3/bottleneck_v1/add-resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block2/unit_1/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block2/unit_1/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D-resnet_v1_50/block2/unit_1/bottleneck_v1/add True
 delete arch  resnet_v1_50/block2/unit_1/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block2/unit_1/bottleneck_v1/add True
 delete arch  resnet_v1_50/block2/unit_1/bottleneck_v1/add-resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block2/unit_2/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block2/unit_2/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block2/unit_2/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block2/unit_2/bottleneck_v1/add True
 delete arch  resnet_v1_50/block2/unit_1/bottleneck_v1/add-resnet_v1_50/block2/unit_2/bottleneck_v1/add True
 delete arch  resnet_v1_50/block2/unit_2/bottleneck_v1/add-resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block2/unit_3/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block2/unit_3/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block2/unit_3/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block2/unit_3/bottleneck_v1/add True
 delete arch  resnet_v1_50/block2/unit_2/bottleneck_v1/add-resnet_v1_50/block2/unit_3/bottleneck_v1/add True
 delete arch  resnet_v1_50/block2/unit_3/bottleneck_v1/add-resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block2/unit_4/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block2/unit_4/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block2/unit_4/bottleneck_v1/shortcut/MaxPool-resnet_v1_50/block2/unit_4/bottleneck_v1/add True
 delete arch  resnet_v1_50/block2/unit_4/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block2/unit_4/bottleneck_v1/add True
 delete arch  resnet_v1_50/block2/unit_4/bottleneck_v1/add-resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block3/unit_1/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block3/unit_1/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D-resnet_v1_50/block3/unit_1/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_1/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block3/unit_1/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_1/bottleneck_v1/add-resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block3/unit_2/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block3/unit_2/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block3/unit_2/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block3/unit_2/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_1/bottleneck_v1/add-resnet_v1_50/block3/unit_2/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_2/bottleneck_v1/add-resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block3/unit_3/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block3/unit_3/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block3/unit_3/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block3/unit_3/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_2/bottleneck_v1/add-resnet_v1_50/block3/unit_3/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_3/bottleneck_v1/add-resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block3/unit_4/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block3/unit_4/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block3/unit_4/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block3/unit_4/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_3/bottleneck_v1/add-resnet_v1_50/block3/unit_4/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_4/bottleneck_v1/add-resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block3/unit_5/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block3/unit_5/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block3/unit_5/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block3/unit_5/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_4/bottleneck_v1/add-resnet_v1_50/block3/unit_5/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_5/bottleneck_v1/add-resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block3/unit_6/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block3/unit_6/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block3/unit_6/bottleneck_v1/shortcut/MaxPool-resnet_v1_50/block3/unit_6/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_6/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block3/unit_6/bottleneck_v1/add True
 delete arch  resnet_v1_50/block3/unit_6/bottleneck_v1/add-resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block4/unit_1/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block4/unit_1/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D-resnet_v1_50/block4/unit_1/bottleneck_v1/add True
 delete arch  resnet_v1_50/block4/unit_1/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block4/unit_1/bottleneck_v1/add True
 delete arch  resnet_v1_50/block4/unit_1/bottleneck_v1/add-resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block4/unit_2/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block4/unit_2/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block4/unit_2/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block4/unit_2/bottleneck_v1/add True
 delete arch  resnet_v1_50/block4/unit_1/bottleneck_v1/add-resnet_v1_50/block4/unit_2/bottleneck_v1/add True
 delete arch  resnet_v1_50/block4/unit_2/bottleneck_v1/add-resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D True
 delete arch  resnet_v1_50/block4/unit_3/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D True
 delete arch  resnet_v1_50/block4/unit_3/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D True
 delete arch  resnet_v1_50/block4/unit_3/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block4/unit_3/bottleneck_v1/add True
 delete arch  resnet_v1_50/block4/unit_2/bottleneck_v1/add-resnet_v1_50/block4/unit_3/bottleneck_v1/add True
 delete arch  resnet_v1_50/block4/unit_3/bottleneck_v1/add-resnet_v1_50/pool5 True
 delete arch  resnet_v1_50/pool5-resnet_v1_50/pool5/mul True
 delete arch  resnet_v1_50/pool5/mul-resnet_v1_50/logits/Conv2D True
 delete arch  resnet_v1_50/logits/Conv2D-resnet_v1_50/SpatialSqueeze True
 delete arch  resnet_v1_50/SpatialSqueeze-resnet_v1_50/predictions/Reshape True
 delete arch  resnet_v1_50/predictions/Reshape-resnet_v1_50/predictions/Softmax True
 delete arch  resnet_v1_50/predictions/Softmax-resnet_v1_50/predictions/Reshape_1 True
 delete node  resnet_v1_50/predictions/Reshape_1
 delete node  resnet_v1_50/block4/unit_1/bottleneck_v1/shortcut/Conv2D
 delete node  resnet_v1_50/block3/unit_6/bottleneck_v1/shortcut/MaxPool
 delete node  resnet_v1_50/block3/unit_1/bottleneck_v1/shortcut/Conv2D
 delete node  resnet_v1_50/block2/unit_4/bottleneck_v1/shortcut/MaxPool
 delete node  resnet_v1_50/block2/unit_1/bottleneck_v1/shortcut/Conv2D
True input
True resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D
True resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D
True resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D
True resnet_v1_50/block1/unit_1/bottleneck_v1/add
True resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D
True resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D
True resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D
 delete arch  resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D True
 delete node  resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D
False resnet_v1_50/block1/unit_3/bottleneck_v1/conv3/Conv2D
True resnet_v1_50/conv1/Conv2D
True resnet_v1_50/pool1/MaxPool
 delete arch  resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D True
 delete node  resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D
False resnet_v1_50/block1/unit_3/bottleneck_v1/conv2/Conv2D
True resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D
 delete node  resnet_v1_50/predictions/Shape_const_const
False resnet_v1_50/predictions/Shape_const_const
 delete arch  resnet_v1_50/block1/unit_2/bottleneck_v1/add-resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D
 True
 delete node  resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D
False resnet_v1_50/block1/unit_3/bottleneck_v1/conv1/Conv2D
True resnet_v1_50/block1/unit_2/bottleneck_v1/add
True resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool
 delete node  resnet_v1_50/predictions/Reshape/shape_const
False resnet_v1_50/predictions/Reshape/shape_const
Outputs dict_keys(['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool'])
  0 data       input                               Ops 0.000000e+00 IN [] OUT ['resnet_v1_50/conv1/Conv2D']
  1 conv2d     resnet_v1_50/conv1/Conv2D           Ops 0.000000e+00 IN ['input'] OUT ['resnet_v1_50/pool1/MaxPool']
  2 maxpool2d  resnet_v1_50/pool1/MaxPool          Ops 0.000000e+00 IN ['resnet_v1_50/conv1/Conv2D'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D']
  3 conv2d     nit_1/bottleneck_v1/shortcut/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/pool1/MaxPool'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/add']
  4 conv2d     1/unit_1/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/pool1/MaxPool'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D']
  5 conv2d     1/unit_1/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D']
  6 conv2d     1/unit_1/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block1/unit_1/bottleneck_v1/add']
  7 add        _50/block1/unit_1/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D', 'resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D'] OUT ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D', 'resnet_v1_50/block1/unit_2/bottleneck_v1/add']
  8 conv2d     1/unit_2/bottleneck_v1/conv1/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D']
  9 conv2d     1/unit_2/bottleneck_v1/conv2/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D'] OUT ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D']
 10 conv2d     1/unit_2/bottleneck_v1/conv3/Conv2D Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D'] OUT ['resnet_v1_50/block1/unit_2/bottleneck_v1/add']
 11 add        _50/block1/unit_2/bottleneck_v1/add Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block1/unit_1/bottleneck_v1/add'] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool']
 12 maxpool2d  it_3/bottleneck_v1/shortcut/MaxPool Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/add'] OUT []
Floyd & Warshall
BFS
Name resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool Type maxpool2d Composed [] Inputs ['resnet_v1_50/block1/unit_2/bottleneck_v1/add'] 

	 Name resnet_v1_50/block1/unit_2/bottleneck_v1/add Type add Composed [] Inputs ['resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D', 'resnet_v1_50/block1/unit_1/bottleneck_v1/add'] 

 delete arch  resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D-resnet_v1_50/block1/unit_2/bottleneck_v1/add
 delete arch  resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block1/unit_2/bottleneck_v1/conv3/Conv2D
 delete arch  resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block1/unit_2/bottleneck_v1/conv2/Conv2D
 delete arch  resnet_v1_50/block1/unit_1/bottleneck_v1/add-resnet_v1_50/block1/unit_2/bottleneck_v1/conv1/Conv2D
 delete arch  resnet_v1_50/block1/unit_1/bottleneck_v1/add-resnet_v1_50/block1/unit_2/bottleneck_v1/add
 delete arch  resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D-resnet_v1_50/block1/unit_1/bottleneck_v1/add
 delete arch  resnet_v1_50/pool1/MaxPool-resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D
 delete arch  resnet_v1_50/pool1/MaxPool-resnet_v1_50/block1/unit_1/bottleneck_v1/shortcut/Conv2D
 delete arch  resnet_v1_50/conv1/Conv2D-resnet_v1_50/pool1/MaxPool
 delete arch  input-resnet_v1_50/conv1/Conv2D
 delete node  Name input Type data Composed [] Inputs [] 

 delete arch  resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D-resnet_v1_50/block1/unit_1/bottleneck_v1/conv3/Conv2D
 delete arch  resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D-resnet_v1_50/block1/unit_1/bottleneck_v1/conv2/Conv2D
 delete node  Name resnet_v1_50/block1/unit_1/bottleneck_v1/conv1/Conv2D Type conv2d Composed [] Inputs [] 

Inputs dict_keys(['input'])
Outputs dict_keys(['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool'])
Inputs dict_keys(['resnet_v1_50/block1/unit_2/bottleneck_v1/add'])
Floyd & Warshall
BFS
  0 data       _50/block1/unit_2/bottleneck_v1/add Ops 0.000000e+00 IN [] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool']
  1 maxpool2d  it_3/bottleneck_v1/shortcut/MaxPool Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/add'] OUT []
 ############################################# 
 ######  CPU nodes Must Go
 ############################################# 
Inputs ['resnet_v1_50/block1/unit_2/bottleneck_v1/add']
Outputs ['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool']
FPGA True: data       resnet_v1_50/block1/unit_2/bottleneck_v1/add  
FPGA True: maxpool2d  resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool  
delete these dict_keys(['resnet_v1_50/block1/unit_2/bottleneck_v1/add'])
{'resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool': Name resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool Type maxpool2d Composed [] Inputs ['resnet_v1_50/block1/unit_2/bottleneck_v1/add'] 
}
Schedule boost
0 data resnet_v1_50/block1/unit_2/bottleneck_v1/add False 1
1 maxpool2d resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool True 1
  0 data       _50/block1/unit_2/bottleneck_v1/add Ops 0.000000e+00 IN [] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool']
  1 maxpool2d  it_3/bottleneck_v1/shortcut/MaxPool Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/add'] OUT []
Outputs ['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool']
Inputs  ['resnet_v1_50/block1/unit_2/bottleneck_v1/add']
Floyd & Warshall
BFS
 ############################################# 
 ######  Avg Pool -> Conv
 ############################################# 
 ############################################# 
 ######  Inner Products -> Conv
 ############################################# 
 ############################################# 
 ######  Scale -> Conv
 ############################################# 
Floyd & Warshall
BFS
 ############################################# 
 ######  topological schedule BFS
 ############################################# 
 ############################################# 
 ######  WEIGHT & BIAS into Tensors
 ############################################# 
 ############################################# 
 ######  Conv + Pool -> single
 ############################################# 
 ############################################# 
 ######  Conv + Elt -> Elt
 ############################################# 
 ############################################# 
 ######  topological DFS
 ############################################# 
DFS_t resnet_v1_50/block1/unit_2/bottleneck_v1/add
 ############################################# 
 ######  TFS
 ############################################# 
INFO tfs
dfs   1- tfs   0   0 resnet_v1_50/block1/unit_2/bottleneck_v1/add TensorShapes(batch=4, width=56, height=56, channel=256) [dict_keys([-1, 'relu'])]
dfs   2- tfs   1   1 resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool TensorShapes(batch=4, width=28, height=28, channel=256) [dict_keys([-1, 'fix'])]
 ############################################# 
 ######  INC
 ############################################# 
INC
 ############################################# 
 ######  Singleton
 ############################################# 
INFO tfs
dfs   1- inc   0- sn   0- tfs   0   0 resnet_v1_50/block1/unit_2/bottleneck_v1/add TensorShapes(batch=4, width=56, height=56, channel=256) [dict_keys([-1, 'relu'])]
dfs   2- inc   0- sn   1- tfs   1   1 resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool TensorShapes(batch=4, width=28, height=28, channel=256) [dict_keys([-1, 'fix'])]
  0 data       _50/block1/unit_2/bottleneck_v1/add Ops 0.000000e+00 IN [] OUT ['resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool']
  1 maxpool2d  it_3/bottleneck_v1/shortcut/MaxPool Ops 0.000000e+00 IN ['resnet_v1_50/block1/unit_2/bottleneck_v1/add'] OUT []
 ############################################# 
 ######  Given a Graph and Schedule boost : We crete Live Tensor
 ############################################# 
 ############################################# 
 ######  Reset Live Structure
 ############################################# 
 ############################################# 
 ######  Attempting Code Generation boost
 ############################################# 
 ############################################# 
 ######  Element Wise: reuse one of the operands
 ############################################# 
 ############################################# 
 ######  Concatenation: I love concatenation memory reuse
 ############################################# 
 ############################################# 
 ######  Memory Management given a Schedule
 ############################################# 
Namespace(address=None, avgpool_as_convolution=True, backwardcut='resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool', biaspatch='true', caffemodel=None, fc=False, final=False, firstlayerreshape=False, forwardcut='resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool', framework='tensorflow', inner_as_convolution=True, inshapes='[4,224,224,3]', json='SC/meta.json', network='examples/tf_resnetv1_50_imagenet_224_224_6.97G/quantized/quantize_eval_model.pb', nocpu=True, operation_fusion='true', operation_fusion_elt='true', operation_fusion_pool_conv=False, output='SC/work/manasa/tf/all/12/out.asm', parallelismgraphalgorithm=None, parallelismstrategy="['bottom','top']", params='SC/work/manasa/tf/all/12/params.txt', quant='examples/tf_resnetv1_50_imagenet_224_224_6.97G/quantized/temp_fix.txt', skip=False, softwarepipeline='true')
Step  resnet_v1_50/block1/unit_2/bottleneck_v1/add
Step  resnet_v1_50/block1/unit_2/bottleneck_v1/add is an input
WARNING resnet_v1_50/block1/unit_2/bottleneck_v1/add data WARNING
Step  resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool
Memory access IN ddr PAR pa  TMP fm  OUT ddr resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool parallelism 3 [1, 0, 0, 0, 1, 1]  
 ############################################# 
 ######  Naive instruction dependency
 ############################################# 
 ############################################# 
 ######  Code Generation at Node Level and then Recursively
 ############################################# 
Dependency ON 0 0 CUR 0 BY 0 
1 4 resnet_v1_50/block1/unit_2/bottleneck_v1/add ON 0 CUR 0 BY 1
2 4 resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool ON 0 CUR 8 BY 2
3 4 bracket ON 2 CUR 2 BY 0
 ############################################# 
 ######  Code Generation at Node Level and then Recursively
 ############################################# 
1 1 [1835008.0, 917504] [917504, 458752]
BATCH IN  Shape [4, 56, 56, 256] Heights [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2] 
BATCH OUT Shape [4, 28, 28, 256] Heights [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] 
Name resnet_v1_50/block1/unit_2/bottleneck_v1/add Parameter False	Space 25690112 bits, BitePerPixel 8 Fraction 4 Start 0 End 25690112	Specifier 0 Layout 3 Time 1 Strategies None None	Shape  [4, 56, 56, 256] CNN_Shape TensorShapes(batch=4, width=56, height=56, channel=256) Memory_Access(input=3, parameters=1, output=3)
WP {'shift': 1, 'mapping': {'I': 0, 'O': 1}, 'full-level-a': 1, 'step': {}, 'info': {}}
input 0 0
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 0 0 0
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 458752 1 0
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 1376256 3 0
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 2293760 5 0
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 3211264 7 0
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 4128768 1 896
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 5046272 3 896
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 5963776 5 896
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 6881280 7 896
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 7798784 1 1792
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 8716288 3 1792
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 9633792 5 1792
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 10551296 7 1792
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 11468800 1 2688
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 12386304 3 2688
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 13303808 5 2688
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 14221312 7 2688
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 15138816 1 3584
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 16056320 3 3584
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 16973824 5 3584
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 17891328 7 3584
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 18808832 1 4480
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 19726336 3 4480
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 20643840 5 4480
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 21561344 7 4480
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 22478848 1 5376
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 23396352 3 5376
Input resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool 0 24313856 5 5376
 ############################################# 
 ######  Success 
 ############################################# 
 ############################################# 
 ######  Writing code to file:SC/work/manasa/tf/all/12/out.asm
 ############################################# 
{'inputs': {'resnet_v1_50/block1/unit_2/bottleneck_v1/add': {'name': 'resnet_v1_50/block1/unit_2/bottleneck_v1/add', 'shape': TensorShapes(batch=4, width=56, height=56, channel=256), 'address': 0}}, 'outputs': {'resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool': {'name': 'resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool', 'shape': TensorShapes(batch=4, width=28, height=28, channel=256), 'address': 25690112}}, 'cmd': ('SC/HwAbstraction/code_generation.py -o SC/work/manasa/tf/all/12/out.asm --params SC/work/manasa/tf/all/12/params.txt -n examples/tf_resnetv1_50_imagenet_224_224_6.97G/quantized/quantize_eval_model.pb -f tensorflow --json SC/meta.json -swpipe true -opfus true -opfuse true --biaspatch true --quant examples/tf_resnetv1_50_imagenet_224_224_6.97G/quantized/temp_fix.txt --forwardcut resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool --backwardcut resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool',)}
Namespace(address=None, avgpool_as_convolution=True, backwardcut='resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool', biaspatch='true', caffemodel=None, fc=False, final=False, firstlayerreshape=False, forwardcut='resnet_v1_50/block1/unit_3/bottleneck_v1/shortcut/MaxPool', framework='tensorflow', inner_as_convolution=True, inshapes='[4,224,224,3]', json='SC/meta.json', network='examples/tf_resnetv1_50_imagenet_224_224_6.97G/quantized/quantize_eval_model.pb', nocpu=True, operation_fusion='true', operation_fusion_elt='true', operation_fusion_pool_conv=False, output='SC/work/manasa/tf/all/12/out.asm', parallelismgraphalgorithm=None, parallelismstrategy="['bottom','top']", params='SC/work/manasa/tf/all/12/params.txt', quant='examples/tf_resnetv1_50_imagenet_224_224_6.97G/quantized/temp_fix.txt', skip=False, softwarepipeline='true')
{'model': 'res50', 'kernel': 'dpdpuv3_wrapper', 'xclbin': 'tests/app/models/dpuv3int8_resnet50', 'instrFile': 'controller/src/dpuv3int8/instr.txt', 'dInFile': 'controller/src/dpuv3int8/din.txt', 'dOutFile': 'controller/src/dpuv3int8/dout.txt', 'resultFile': 'controller/src/dpuv3int8/result.txt', 'paramsFile': 'controller/src/dpuv3int8/params.txt', 'inDDRSize': 150528, 'inKernelW': 7, 'inStrdW': 2, 'inCh': 3, 'inH': 224, 'inW': 224, 'outW': 112, 'padLft': 3, 'padRt': 3, 'swapBufSize': 16777216, 'druSrcBufSize': 16777216, 'druDstBufSize': 16777216, 'channelAugmentationMode': False, 'druMode': True}
SC/ meta json
